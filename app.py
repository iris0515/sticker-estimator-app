# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W_qDnZOBpyI-R1n7nguT1IehiUP6K6Ph
"""

# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W_qDnZOBpyI-R1n7nguT1IehiUP6K6Ph
"""

import streamlit as st
import math
import pandas as pd

# 설정
st.set_page_config(page_title="스티커 견적 계산기", page_icon="📐", layout="centered")

# 공용 함수
def format_number(n): return format(n, ",").replace(",", ".")
def number_to_korean(num):
    digits = ["", "일", "이", "삼", "사", "오", "육", "칠", "팔", "구"]
    units = ["", "십", "백", "천"]
    big_units = ["", "만", "억", "조", "경"]
    result, group = "", 0
    while num > 0:
        part, part_str = num % 10000, ""
        num //= 10000
        for i in range(4):
            d = part % 10
            part //= 10
            if d != 0:
                part_str = (units[i] if d == 1 and i > 0 else digits[d] + units[i]) + part_str
        result = part_str + big_units[group] + result if part_str else result
        group += 1
    return result
def format_result(n): return f"{format_number(n)} ({number_to_korean(n)})"

# 디자인
st.markdown("""
    <style>
    .main { background-color: #f8fcfb; }
    .stButton>button {
        background-color: #00b894;
        color: white;
        border-radius: 8px;
        padding: 0.5em 1.2em;
        font-weight: bold;
    }
    .stTabs [role="tab"] {
        font-size: 18px;
        padding: 10px;
    }
    </style>
""", unsafe_allow_html=True)

# 타이틀
st.markdown("<h1 style='text-align:center; color:#00b894;'>🧾 스티커 견적 계산기</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align:center;'>모든 견적을 하나의 앱에서 간편하게 계산해보세요!</p>", unsafe_allow_html=True)

# 탭
tab1, tab2, tab3 = st.tabs(["📐 면적 계산기", "📦 헤다포장", "🎨 기타 견적"])

# ▶️ tab1: 면적 계산기
with tab1:
    st.markdown("### 📐 면적 계산기 (업그레이드)")

    st.info("270x400mm 또는 280x400mm 용지에 스티커가 얼마나 들어가는지 계산해줍니다.")

    col1, col2, col3 = st.columns(3)
    with col1:
        width = st.number_input("가로(mm)", min_value=1.0, value=50.0, step=1.0)
    with col2:
        height = st.number_input("세로(mm)", min_value=1.0, value=50.0, step=1.0)
    with col3:
        quantity = st.number_input("총 수량", min_value=1, value=100, step=1)

    sheet_type = st.selectbox("기본 용지 사이즈", ["270x400mm", "280x400mm"])

    if st.button("면적 계산"):
        max_width, max_height = (270, 400) if sheet_type == "270x400mm" else (280, 400)

        # 한 행에 몇 개 들어가는지
        num_width = math.floor(max_width / width)
        num_height = math.floor(max_height / height)

        # 한 장에 들어가는 총 수
        total_per_sheet = num_width * num_height

        if total_per_sheet == 0:
            st.error("❌ 해당 크기는 용지에 들어가지 않습니다.")
        else:
            # 기본 계산
            total_needed_sheets = math.ceil(quantity / total_per_sheet)
            im_basis = math.ceil(quantity / 20) if total_per_sheet >= 20 else total_needed_sheets
            sticky_basis = math.ceil(quantity / 16) if total_per_sheet >= 16 else total_needed_sheets

            st.success(f"✅ 한 장당 최대 배치 수: {format_result(total_per_sheet)}개")
            st.info(f"📄 기본 수량 기준: {format_result(total_needed_sheets)}장")
            st.write(f"💡 완칼 기준 수량 (아임 기준 20개): {format_result(im_basis)}장")
            st.write(f"💡 완칼 기준 수량 (스티키 기준 16개): {format_result(sticky_basis)}장")

# ▶️ tab2: 헤다포장 계산기
with tab2:
    st.markdown("### 📦 헤다포장 견적 계산기 (업그레이드)")

    st.subheader("1️⃣ 헤다 면적 계산기")
    col1, col2 = st.columns(2)
    width = col1.number_input("가로길이 (mm)", min_value=1.0, value=50.0)
    height = col2.number_input("세로길이 (mm)", min_value=1.0, value=50.0)

    if st.button("면적 계산"):
        container_width, container_height = 255, 385
        num_width = math.floor(container_width / width)
        num_height = math.floor(container_height / height)
        total = num_width * num_height
        if total == 0:
            st.error("❌ 입력한 크기의 아이템이 컨테이너에 들어가지 않습니다.")
        else:
            st.success(f"✅ 한 장에 최대 {total}개 들어갈 수 있습니다.")

    st.divider()

    st.subheader("2️⃣ 헤다 견적 계산기")

    col3, col4 = st.columns(2)
    quantity = col3.number_input("헤다 수량", min_value=10, value=100, step=10)
    batch_under_9 = col4.checkbox("9개 이하 배치 (장당 +50원)")
    sticker_included = col4.checkbox("스티커 주문 포함 (장당 -50원)")

    # 단가 계산
    if quantity >= 500:
        heda_unit = 250
    elif quantity >= 300:
        heda_unit = 300
    elif quantity >= 200:
        heda_unit = 350
    elif quantity >= 100:
        heda_unit = 400
    else:
        heda_unit = 450

    if batch_under_9:
        heda_unit += 50
    if sticker_included:
        heda_unit -= 50

    heda_total = quantity * heda_unit

    st.info(f"헤다 단가: {format_result(heda_unit)}원")
    st.success(f"헤다 견적 합계: {format_result(heda_total)}원")

    st.divider()

    st.subheader("3️⃣ 포장 견적 계산기")

    col5, col6 = st.columns(2)
    qty = col5.number_input("포장 수량", min_value=10, value=100, step=10)
    header_add = col6.checkbox("헤더 장착 (장당 +200원)")
    over_8_types = col6.checkbox("8종 이상 (장당 +100원)")
    over_12_types = col6.checkbox("12종 이상 (장당 +200원)")
    opp_cost = col6.checkbox("OPP 포장비용 (장당 +50원)")

    # 포장 단가 계산
    if qty >= 400:
        packaging_unit = 200
    elif qty >= 300:
        packaging_unit = 250
    elif qty >= 200:
        packaging_unit = 300
    elif qty >= 100:
        packaging_unit = 400
    else:
        packaging_unit = 500

    if header_add:
        packaging_unit += 200
    if over_8_types:
        packaging_unit += 100
    if over_12_types:
        packaging_unit += 200
    if opp_cost:
        packaging_unit += 50

    packaging_total = qty * packaging_unit

    st.info(f"포장 단가: {format_result(packaging_unit)}원")
    st.success(f"포장 견적 합계: {format_result(packaging_total)}원")

    st.divider()

    st.subheader("💰 총 합계")

    total_sum = heda_total + packaging_total
    total_unit_price = heda_unit + packaging_unit

    st.success(f"총 견적: {format_result(total_sum)}원")
    st.info(f"장당 총합 단가: {format_result(total_unit_price)}원")

# ---------------- TAB 3: 기타 견적 계산기 ----------------
with tab3:
    st.markdown("### 📋 일반 / 완칼 / 작가 견적 계산기")

    # 일반 견적
    with st.expander("📋 일반 견적 계산기 (업그레이드)"):
        st.markdown("#### 📦 용지 + 코팅 + 재단 옵션에 따른 견적 계산")
        general_data = pd.DataFrame({
            "스티커용지": ["유포지"] * 3 + ["리무버블유포지"] * 3 + ["아트지"] * 3,
            "코팅필름": ["무광", "유광", "없음"] * 3,
            "재단없을때가격": [5000, 5000, 5000, 5500, 5500, 5500, 4500, 4500, 4500],
            "재단있을때가격": [7000, 7000, 7000, 7500, 7500, 7500, 6500, 6500, 6500]
        })
        col1_gen, col2_gen, col3_gen = st.columns(3)
        with col1_gen:
            g_type = st.selectbox("스티커 용지", general_data["스티커용지"].unique())
        with col2_gen:
            g_coating = st.selectbox("코팅 필름", ["무광", "유광", "없음"])
        with col3_gen:
            g_cut = st.selectbox("재단 여부", ["있음", "없음"])
        g_qty = st.number_input("제작 수량", min_value=1, value=100)
        if st.button("일반 견적 계산", key="general_calc"):
            row = general_data[(general_data["스티커용지"] == g_type) & (general_data["코팅필름"] == g_coating)]
            if not row.empty:
                base_price = row["재단있을때가격"].values[0] if g_cut == "있음" else row["재단없을때가격"].values[0]
                coating_extra = 500 if g_coating in ["무광", "유광"] else 0
                unit_price = base_price + coating_extra
                total_price = unit_price * g_qty
                st.success(f"✔️ 단가: {format_result(unit_price)}원")
                st.info(f"💰 총 가격: {format_result(total_price)}원")

    # 완칼 스티키
    with st.expander("🧷 완칼 견적 계산기 (스티키, 업그레이드)"):
        sticky_data = pd.DataFrame([
            {"용지": "프리미엄완칼", "코팅": "유광", "용지가격": 5000, "코팅가격": 500},
            {"용지": "프리미엄완칼", "코팅": "스파클", "용지가격": 5000, "코팅가격": 1000},
            {"용지": "유포지", "코팅": "매트펄", "용지가격": 4000, "코팅가격": 1300},
            {"용지": "아트지", "코팅": "벨벳무광", "용지가격": 3800, "코팅가격": 1000}
        ])
        s_type = st.selectbox("스티커 용지 (스티키)", sticky_data["용지"].unique())
        s_coating = st.selectbox("코팅 필름 (스티키)", sticky_data[sticky_data["용지"] == s_type]["코팅"].unique())
        s_qty = st.number_input("제작 수량 (스티키)", min_value=1, value=100)
        if st.button("스티키 견적 계산", key="sticky_calc"):
            row = sticky_data[(sticky_data["용지"] == s_type) & (sticky_data["코팅"] == s_coating)]
            if not row.empty:
                base_price = row.iloc[0]["용지가격"] + row.iloc[0]["코팅가격"]
                if s_qty >= 125: unit_price = base_price - 500
                elif s_qty >= 62: unit_price = base_price - 300
                elif s_qty >= 31: unit_price = base_price - 200
                else: unit_price = base_price
                total_price = unit_price * s_qty
                st.success(f"✔️ 단가: {format_result(unit_price)}원")
                st.info(f"💰 총 가격: {format_result(total_price)}원")

    # 완칼 아임
    with st.expander("🧲 완칼 견적 계산기 (아임, 업그레이드)"):
        im_data = pd.DataFrame([
            {"용지": "아트지", "코팅": "무광", "용지가격": 4100, "코팅가격": 500},
            {"용지": "아트지", "코팅": "스파클(모래알)", "용지가격": 4100, "코팅가격": 1000},
            {"용지": "리무버블아트지", "코팅": "벨벳무광", "용지가격": 5100, "코팅가격": 1000},
            {"용지": "유포지", "코팅": "유광", "용지가격": 4500, "코팅가격": 500},
            {"용지": "리무버블유포지", "코팅": "별빛", "용지가격": 5500, "코팅가격": 1000}
        ])
        im_type = st.selectbox("스티커 용지 (아임)", im_data["용지"].unique())
        im_coating = st.selectbox("코팅 필름 (아임)", im_data[im_data["용지"] == im_type]["코팅"].unique())
        im_qty = st.number_input("제작 수량 (아임)", min_value=1, value=100)
        if st.button("아임 견적 계산", key="im_calc"):
            row = im_data[(im_data["용지"] == im_type) & (im_data["코팅"] == im_coating)]
            if not row.empty:
                base_price = row.iloc[0]["용지가격"] + row.iloc[0]["코팅가격"]
                if im_qty >= 100: unit_price = base_price - 700
                elif im_qty >= 70: unit_price = base_price - 400
                elif im_qty >= 30: unit_price = base_price - 200
                else: unit_price = base_price
                total_price = unit_price * im_qty
                st.success(f"✔️ 단가: {format_result(unit_price)}원")
                st.info(f"💰 총 가격: {format_result(total_price)}원")

    # 작가 견적
    with st.expander("🎨 작가 견적 계산기 (업그레이드)"):
        col1_art, col2_art, col3_art = st.columns(3)
        with col1_art:
            sticker = st.selectbox("스티커 용지", [
                "유포지", "리무버블유포지", "아트지", "리무버블아트지", "모조지", "투명스티커", "마스킹씰"
            ])
        with col2_art:
            fuji = st.selectbox("후지 종류", ["백색후지", "투명후지"])
        with col3_art:
            cutting = st.selectbox("재단 여부", ["있음", "없음"])
        coating = st.selectbox("코팅 필름", [
            "무광", "유광", "씰크벨벳(무광)", "스파클(모래알)", "레인보우", "별빛", "샌드스타", "매트펄", "없음"
        ])
        qty = st.number_input("제작 수량", min_value=1, value=100)
        if st.button("작가 견적 계산", key="artist_calc"):
            base_map = {
                "유포지": 2900, "리무버블유포지": 3400, "아트지": 2800,
                "리무버블아트지": 3300, "모조지": 2800, "투명스티커": 3800, "마스킹씰": 4500
            }
            coating_map = {
                "무광": 500, "유광": 500, "씰크벨벳(무광)": 1000, "스파클(모래알)": 1000,
                "레인보우": 1000, "별빛": 1000, "샌드스타": 1000, "매트펄": 1300, "없음": 0
            }
            def fuji_add(sticker_type, fuji_type):
                if fuji_type == "투명후지":
                    if sticker_type == "유포지": return 1100
                    if sticker_type == "리무버블유포지": return 800
                return 0
            unit = base_map[sticker] + coating_map[coating] + fuji_add(sticker, fuji)
            if qty >= 100: unit -= 300
            elif qty >= 70: unit -= 200
            elif qty >= 30: unit -= 100
            if cutting == "있음": unit += 500
            total = unit * qty
            st.success(f"✔️ 단가: {format_result(unit)}원")
            st.info(f"💰 총 가격: {format_result(total)}원")